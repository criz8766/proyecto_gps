// Jenkinsfile (ubicado en farmacia-sga/pacientes/Jenkinsfile o en la raíz del repo)

pipeline {
    agent any // Ejecutar en cualquier agente disponible (el controlador Jenkins)

    environment {
        IMAGE_NAME = "localhost/farmacia-sga_pacientes_jenkins_build"
        TAG_NAME = "ci-${env.BUILD_NUMBER}" // Etiqueta única por build
        // Rutas relativas al workspace de Jenkins (la raíz del repo clonado)
        DOCKERFILE_PATH = "./pacientes/Dockerfile" 
        BUILD_CONTEXT = "./pacientes" 
    }

    stages {
        stage('Checkout SCM') { // Nombre de etapa más estándar
            steps {
                echo 'Obteniendo el código desde Git...'
                // checkout scm utiliza la configuración SCM del job de Jenkins
                // Asegúrate que tu job en Jenkins esté configurado para clonar la rama correcta
                // de https://github.com/criz8766/proyecto_gps.git
                checkout scm 
                script {
                    // Opcional: Muestra el commit actual para referencia en los logs
                    def commitHash = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
                    echo "Código obtenido del commit: ${commitHash}"
                }
            }
        }

        stage('Build Image with Sudo Podman') {
            steps {
                script {
                    echo "Construyendo imagen Podman con sudo: ${IMAGE_NAME}:${TAG_NAME}"
                    echo "Usando Dockerfile: ${DOCKERFILE_PATH}"
                    echo "Con contexto de build: ${BUILD_CONTEXT}"
                    
                    // Ejecutar podman build con sudo y la ruta completa a podman
                    // Esto asume que el usuario 'jenkins' tiene permisos de sudo para /usr/bin/podman sin contraseña
                    // y que podman está instalado en /usr/bin/podman dentro del contenedor Jenkins.
                    sh "sudo /usr/bin/podman build -t ${IMAGE_NAME}:${TAG_NAME} -f ${DOCKERFILE_PATH} ${BUILD_CONTEXT}"
                    
                    echo "Imagen construida: ${IMAGE_NAME}:${TAG_NAME}"
                }
            }
        }

        // --- Etapas Futuras (Descomentar y adaptar cuando estés listo) ---
        /*
        stage('Test Image (Placeholder)') {
            steps {
                echo 'Ejecutando pruebas en la imagen (si aplica)...'
                // Ejemplo:
                // sh "sudo /usr/bin/podman run --rm ${IMAGE_NAME}:${TAG_NAME} python -m pytest" 
                // (Esto requeriría que tus pruebas estén dentro de la imagen y sean ejecutables así)
            }
        }

        stage('Push Image to Registry (Placeholder)') {
            // Solo ejecutar para ciertas ramas, por ejemplo, 'main' o 'master'
            // when {
            // branch 'main' 
            // }
            steps {
                script {
                    echo "Empujando imagen ${IMAGE_NAME}:${TAG_NAME} al registro..."
                    // Necesitarás configurar credenciales para tu registro en Jenkins
                    // y luego usar 'podman login' y 'podman push'.
                    // Ejemplo para Docker Hub (necesitarías credenciales almacenadas en Jenkins):
                    // withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    //     sh "sudo /usr/bin/podman login docker.io -u ${DOCKER_USER} -p ${DOCKER_PASS}"
                    //     sh "sudo /usr/bin/podman push ${IMAGE_NAME}:${TAG_NAME}"
                    // }
                    // Para Harbor u otro registro, los comandos serían similares.
                }
            }
        }
        */
    }

    post {
        always {
            echo 'Pipeline finalizado.'
            // Opcional: Limpiar el workspace de Jenkins para ahorrar espacio
            // cleanWs() 
        }
        success {
            echo '¡Pipeline ejecutado exitosamente!'
        }
        failure {
            echo '¡Pipeline falló!'
            // Aquí podrías añadir notificaciones (email, Slack, etc.)
        }
    }
}
